-- Enter and Exit Markets Tests

Test "Enter Markets Idempotent"
	NewComptroller
	Assert Equal (Comptroller MembershipLength Geoff) Zero
	Assert Equal (Comptroller AssetsIn Geoff) []
	ListedFToken ZRX fZRX
	EnterMarkets Geoff fZRX
	Assert Log MarketEntered (fToken (Address fZRX)) (account (Address Geoff))
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	Assert True (Comptroller CheckMembership Geoff fZRX)
	ListedFToken OMG fOMG
	EnterMarkets Geoff fZRX fOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 2)
	Assert True (Comptroller CheckMembership Geoff fZRX)
	Assert True (Comptroller CheckMembership Geoff fOMG)
	Assert Equal (Comptroller AssetsIn Geoff) [(Address fZRX) (Address fOMG)]

Test "Entered Market Must Be Supported"
	NewComptroller
	Assert Equal (Comptroller MembershipLength Geoff) Zero
	ListedFToken ZRX fZRX
	EnterMarkets Geoff fZRX
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	NewFToken OMG fOMG
	EnterMarkets Geoff fZRX fOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	Assert True (Comptroller CheckMembership Geoff fZRX)
	Assert False (Comptroller CheckMembership Geoff fOMG)
	Support fOMG
	EnterMarkets Geoff fZRX fOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 2)
	Assert True (Comptroller CheckMembership Geoff fZRX)
	Assert True (Comptroller CheckMembership Geoff fOMG)

Test "Cannot enter Markets beyond max assets"
	NewComptroller
	Comptroller SetMaxAssets 1
	Assert Equal (Comptroller MembershipLength Geoff) Zero
	ListedFToken ZRX fZRX
	ListedFToken OMG fOMG
	EnterMarkets Geoff fZRX fOMG
	Assert Equal (Comptroller MembershipLength Geoff) (Exactly 1)
	Assert True (Comptroller CheckMembership Geoff fZRX)
	Assert False (Comptroller CheckMembership Geoff fOMG)

Test "Exit single market"
	NewComptroller
	ListedFToken ZRX fZRX
	EnterMarkets Geoff fZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address fZRX)]
	ExitMarket Geoff fZRX
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Exit non-entered market"
	NewComptroller
	ListedFToken ZRX fZRX
	ExitMarket Geoff fZRX
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Exit one of two market from the front"
	NewComptroller
	ListedFToken ZRX fZRX
	ListedFToken OMG fOMG
	EnterMarkets Geoff fZRX fOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address fZRX) (Address fOMG)]
	ExitMarket Geoff fZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address fOMG)]

Test "Exit one of two market from the back"
	NewComptroller
	ListedFToken ZRX fZRX
	ListedFToken OMG fOMG
	EnterMarkets Geoff fZRX fOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address fZRX) (Address fOMG)]
	ExitMarket Geoff fOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address fZRX)]

Test "Exit multiple markets"
	NewComptroller
	ListedFToken ZRX fZRX
	ListedFToken OMG fOMG
	ListedFToken BAT fBAT
	ListedFToken REP fREP
	ListedFToken DAI fDAI
	EnterMarkets Geoff fZRX fOMG fBAT fREP fDAI
	Assert Equal (Comptroller AssetsIn Geoff) [(Address fZRX) (Address fOMG) (Address fBAT) (Address fREP) (Address fDAI)]
	ExitMarket Geoff fZRX
	Assert Equal (Comptroller AssetsIn Geoff) [(Address fDAI) (Address fOMG) (Address fBAT) (Address fREP)]
	ExitMarket Geoff fREP
	Assert Equal (Comptroller AssetsIn Geoff) [(Address fDAI) (Address fOMG) (Address fBAT)]
	ExitMarket Geoff fOMG
	Assert Equal (Comptroller AssetsIn Geoff) [(Address fDAI) (Address fBAT)]
	ExitMarket Geoff fDAI
	Assert Equal (Comptroller AssetsIn Geoff) [(Address fBAT)]
	ExitMarket Geoff fBAT
	Assert Equal (Comptroller AssetsIn Geoff) []

Test "Realistic Market Scenario"
	PricedComptroller
	ListedFToken ZRX fZRX
	SetPriceCF fZRX 0.002 0.4
	ListedBNBToken fBNB
	Comptroller SetCollateralFactor fBnb 0.8
	ListedFToken BAT fBAT
	SetPriceCF fBAT 0.0015 0.3
	-- Mint some fZRX and fBNB
	Prep Geoff 1250e18 ZRX fZRX
	Mint Geoff 1250e18 fZRX -- Liquidity -> 0.4 * 0.002 * 1250e18 = 1.0e18
	SendMintBnb Geoff 2.5e18 fBNB -- Liqiuidity -> 0.8 * 1.0 * 2.5e18 = 2.0e18
	-- Check liquidity is zero when not in any markets
	Assert Equal (Comptroller Liquidity Geoff) Zero
	-- Enter ZRX and check liquidity
	EnterMarkets Geoff fZRX
	Assert Equal (Comptroller Liquidity Geoff) 1.0e18
	-- Fail to borrow BAT due to liquidity
	Give fBAT 1000e18 BAT
	HoldInvariants
	Borrow Geoff 1000e18 fBAT -- 1000e18 * 0.0015 = 1.5e18 required liquidity
							  -- But since we're only in ZRX, we only have 1.0e18 liquidity
	Assert Failure COMPTROLLER_REJECTION BORROW_COMPTROLLER_REJECTION INSUFFICIENT_LIQUIDITY
	-- Enter fBNB and check liquidity
	EnterMarkets Geoff fBNB
	Assert Equal (Comptroller Liquidity Geoff) 3.0e18 -- Sum of fBNB and fZRX liquidity from above
	-- Borrow previous BAT amount given liquidity
	Borrow Geoff 1000e18 fBAT
	Assert Equal (Comptroller Liquidity Geoff) 1.5e18 -- Less the borrow amount's toll
	-- Try to exit a bnb market but fail due to given borrow requiring bnb as collateral
	HoldInvariants
	ExitMarket Geoff fBNB
	Assert Failure REJECTION EXIT_MARKET_REJECTION INSUFFICIENT_LIQUIDITY -- Liquidity check fails
	Assert Equal (Comptroller AssetsIn Geoff) [(Address fZRX) (Address fBAT) (Address fBNB)]
	-- Repay some borrow and exit market OMG
	Allow Geoff fBAT
	RepayBorrow Geoff 500e18 fBAT
	Assert Equal (Comptroller Liquidity Geoff) 2.25e18 -- With 0.75e18 repaid
	ExitMarket Geoff fBNB
	Assert Equal (Comptroller AssetsIn Geoff) [(Address fZRX) (Address fBAT)]
	Assert Equal (Comptroller Liquidity Geoff) 0.25e18 -- Less Bnb's 2.0e18 collateral weight
	-- Try and exit fBAT (firist without, then after, repaying)
	HoldInvariants
	ExitMarket Geoff fBAT
	Assert Failure NONZERO_BORROW_BALANCE EXIT_MARKET_BALANCE_OWED
	RepayBorrow Geoff UInt256Max fBAT
	ExitMarket Geoff fBAT
	Assert Equal (Comptroller AssetsIn Geoff) [(Address fZRX)]
	Assert Equal (Comptroller Liquidity Geoff) 1.0e18 -- Back to just fZRX
	-- Exit fZRX
	ExitMarket Geoff fZRX
	Assert Equal (Comptroller AssetsIn Geoff) []
	Assert Equal (Comptroller Liquidity Geoff) 0e18 -- Back to nothing
